package com.cve.project.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.cve.project.model.CVE;
import com.cve.project.model.NVDResponse;
import com.cve.project.model.Vulnerability;
import com.mongodb.DuplicateKeyException;

@Service
public class CVEService {

    @Autowired
    private MongoTemplate mongoTemplate;

    private final String NVD_API_BASE_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0";

    public String fetchCVEsFromNVD(int resultsPerPage, int startIndex) {
        try {
            String apiUrl = String.format("%s?resultsPerPage=%d&startIndex=%d", NVD_API_BASE_URL, resultsPerPage,
                    startIndex);
            RestTemplate restTemplate = new RestTemplate();
            NVDResponse response = restTemplate.getForObject(apiUrl, NVDResponse.class);
            if (response != null && response.getVulnerabilities() != null) {
                for (Vulnerability vulnerability : response.getVulnerabilities()) {
                    System.out.println("ID : " + vulnerability.getCve().getId());
                    CVE cveEntity = new CVE();
                    cveEntity.setId(vulnerability.getCve().getId());
                    cveEntity.setLastModified(vulnerability.getCve().getLastModified());
                    cveEntity.setConfigurations(vulnerability.getCve().getConfigurations());
                    cveEntity.setDescriptions(vulnerability.getCve().getDescriptions());
                    cveEntity.setMetrics(vulnerability.getCve().getMetrics());
                    cveEntity.setPublished(vulnerability.getCve().getPublished());
                    cveEntity.setReferences(vulnerability.getCve().getReferences());
                    cveEntity.setSourceIdentifier(vulnerability.getCve().getSourceIdentifier());
                    cveEntity.setVulnStatus(vulnerability.getCve().getVulnStatus());
                    cveEntity.setWeaknesses(vulnerability.getCve().getWeaknesses());
                    mongoTemplate.save(cveEntity, "cve_data");
                }
            }

        } catch (DuplicateKeyException e) {
            System.out.println("Duplication" + e);
        }
        return "Data loaded";
    }

     public List<CVE> filterByCveId(String cveId) {
        Query query = new Query(Criteria.where("id").is(cveId));
        return mongoTemplate.find(query, CVE.class);
    }

    public List<CVE> filterByScore(double baseScore) {
        Query query = new Query(Criteria.where("metrics.cvssMetricV2.cvssData.baseScore").is(baseScore));
        return mongoTemplate.find(query, CVE.class);
    }

    public List<CVE> filterByLastModeified(String fromDate, String toDate) {
        Query query = new Query(Criteria.where("lastModified").gte(fromDate).lte(toDate));
        return mongoTemplate.find(query, CVE.class);
    }
}
