package com.cve.project.action;

import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import com.cve.project.model.CVE;
import com.cve.project.model.NVDResponse;
import com.cve.project.model.Vulnerability;

@Component
public class scheduler {

  @Autowired
  private MongoTemplate mongoTemplate;

  @Scheduled(cron = "0 * * ? * *")
  public void cveUpdate() {
    try {
      System.out.println("schedule running");
      int resultsPerPage = 2000;
      int startIndex = 0;
      Instant currentInstant = Instant.now();
      Instant last24HoursInstant = currentInstant.minusSeconds(24 * 60 * 60); // Subtracting 24 hours in seconds

      OffsetDateTime last24HoursDateTime = OffsetDateTime.ofInstant(last24HoursInstant, ZoneOffset.UTC);
      OffsetDateTime currentDateTime = OffsetDateTime.ofInstant(currentInstant, ZoneOffset.UTC);

      DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSSXXX");

      String lastModStartDate = formatter.format(last24HoursDateTime);
      String lastModEndDate = formatter.format(currentDateTime);
      System.out.println("lastModStartDate : " + lastModStartDate);
      System.out.println("lastModEndDate : " + lastModEndDate);
      int totalResults;
      do {
        String apiUrl = "https://services.nvd.nist.gov/rest/json/cves/2.0/?lastModStartDate=" +
            lastModStartDate + "&lastModEndDate=" + lastModEndDate;

        RestTemplate restTemplate = new RestTemplate();
        NVDResponse response = restTemplate.getForObject(apiUrl, NVDResponse.class);
        if (response != null && response.getVulnerabilities() != null) {
          for (Vulnerability vulnerabilityDetails : response.getVulnerabilities()) {
            CVE vulnerability = vulnerabilityDetails.getCve();
            System.out.println("Updating vulnerability: " + vulnerability.getId());
            CVE existingEntity = mongoTemplate.findById(vulnerability.getId(), CVE.class);
            existingEntity.setId(vulnerability.getId());
            existingEntity.setLastModified(vulnerability.getLastModified());
            existingEntity.setConfigurations(vulnerability.getConfigurations());
            existingEntity.setDescriptions(vulnerability.getDescriptions());
            existingEntity.setMetrics(vulnerability.getMetrics());
            existingEntity.setPublished(vulnerability.getPublished());
            existingEntity.setReferences(vulnerability.getReferences());
            existingEntity.setSourceIdentifier(vulnerability.getSourceIdentifier());
            existingEntity.setVulnStatus(vulnerability.getVulnStatus());
            existingEntity.setWeaknesses(vulnerability.getWeaknesses());
            mongoTemplate.save(existingEntity);
          }
        }

        totalResults = response.getTotalResults();
        startIndex += resultsPerPage;
      } while (startIndex < totalResults);
    } catch (Exception e) {
      System.out.println("e" + e);
    }

  }

}
